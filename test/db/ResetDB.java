package db;

import java.sql.PreparedStatement;

public class ResetDB {
	private static PreparedStatement resetDB;
	private static final String resetScript = "DROP TABLE IF EXISTS MaterialQuantity;\r\n"
			+ "DROP TABLE IF EXISTS Vans;\r\n"
			+ "DROP TABLE IF EXISTS Locations;\r\n"
			+ "DROP TABLE IF EXISTS Inventory;\r\n"
			+ "DROP TABLE IF EXISTS HourLogs;\r\n"
			+ "DROP TABLE IF EXISTS MaterialLogs;\r\n"
			+ "DROP TABLE IF EXISTS Logs;\r\n"
			+ "DROP TABLE IF EXISTS SupplierOrderline;\r\n"
			+ "DROP TABLE IF EXISTS SupplyOrder;\r\n"
			+ "DROP TABLE IF EXISTS OfferOrderline;\r\n"
			+ "DROP TABLE IF EXISTS Orderline;\r\n"
			+ "DROP TABLE IF EXISTS Offer;\r\n"
			+ "DROP TABLE IF EXISTS Orders;\r\n"
			+ "DROP TABLE IF EXISTS StockReservation;\r\n"
			+ "DROP TABLE IF EXISTS StockMaterial;\r\n"
			+ "DROP TABLE IF EXISTS GenericMaterial;\r\n"
			+ "DROP TABLE IF EXISTS SalesPrice;\r\n"
			+ "DROP TABLE IF EXISTS PurchasePrice;\r\n"
			+ "DROP TABLE IF EXISTS MaterialDescription;\r\n"
			+ "DROP TABLE IF EXISTS Material;\r\n"
			+ "DROP TABLE IF EXISTS Employee;\r\n"
			+ "DROP TABLE IF EXISTS BusinessCustomer;\r\n"
			+ "DROP TABLE IF EXISTS Customer;\r\n"
			+ "DROP TABLE IF EXISTS Person;\r\n"
			+ "DROP TABLE IF EXISTS Address;\r\n"
			+ "DROP TABLE IF EXISTS Zipcodes;\r\n"
			+ "DROP TABLE IF EXISTS EmployeeType;"
			+ "\r\n"
			+ "CREATE TABLE Zipcodes(\r\n"
			+ "Zipcode int PRIMARY KEY,\r\n"
			+ "CityName varchar(50) NOT NULL,\r\n"
			+ ");\r\n"
			+ "CREATE TABLE Address(\r\n"
			+ "AddressId int IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "StreetName varchar(30) NOT NULL,\r\n"
			+ "BuildingNo varchar(10) NOT NULL,\r\n"
			+ "FloorNo INT, \r\n"
			+ "Country varchar(50) NOT NULL,\r\n"
			+ "Zipcode int NOT NULL,\r\n"
			+ "FOREIGN KEY(Zipcode) REFERENCES Zipcodes(Zipcode)\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE EmployeeType(\r\n"
			+ "EmployeeTypeNo INT IDENTITY (1,1) PRIMARY KEY, \r\n"
			+ "EmployeeTypeName varchar(20),\r\n"
			+ ");\r\n"
			+ "CREATE TABLE Person(\r\n"
			+ "PersonId int IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "FirstName varchar(30) NOT NULL,\r\n"
			+ "LastName varchar(30) NOT NULL,\r\n"
			+ "PhoneNo varchar(30) NOT NULL,\r\n"
			+ "Email varchar(100) NOT NULL,\r\n"
			+ "AddressId INT  NOT NULL,\r\n"
			+ "FOREIGN KEY (AddressId) REFERENCES Address(AddressId),\r\n"
			+ ");\r\n"
			+ "CREATE TABLE Customer(\r\n"
			+ "CustomerNo INT IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "PersonId INT NOT NULL,\r\n"
			+ "FOREIGN KEY (PersonId) REFERENCES Person(PersonId),\r\n"
			+ ");\r\n"
			+ "CREATE TABLE BusinessCustomer(\r\n"
			+ "CVR INT PRIMARY KEY, \r\n"
			+ "BusinessName varchar(50) NOT NULL,\r\n"
			+ "CustomerNo int NOT NULL, \r\n"
			+ "FOREIGN KEY(CustomerNo) REFERENCES Customer(CustomerNo),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Employee(\r\n"
			+ "EmployeeId int IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "CPR varchar(10)NOT NULL,\r\n"
			+ "EmployeeTypeNo INT NOT NULL,\r\n"
			+ "PersonId int NOT NULL,\r\n"
			+ "FOREIGN KEY (EmployeeTypeNo) REFERENCES EmployeeType(EmployeeTypeNo),\r\n"
			+ "FOREIGN KEY (PersonId) REFERENCES Person(PersonId),\r\n"
			+ "\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Material(\r\n"
			+ "MaterialNo int PRIMARY KEY, \r\n"
			+ "ProductName varchar(30) NOT NULL,\r\n"
			+ ")\r\n"
			+ "\r\n"
			+ "CREATE TABLE MaterialDescription(\r\n"
			+ "Description varchar(100) not null, \r\n"
			+ "MaterialDescriptionTimeStamp DATETIME NOT NULL,		\r\n"
			+ "MaterialNo int NOT NULL, \r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo), \r\n"
			+ "PRIMARY KEY (MaterialNo , MaterialDescriptionTimeStamp),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE PurchasePrice(\r\n"
			+ "Price SmallMoney NOT NULL, \r\n"
			+ "PurchasePriceTimeStamp DATETIME NOT NULL, \r\n"
			+ "MaterialNo int NOT NULL,\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo), \r\n"
			+ "PRIMARY KEY (MaterialNo , PurchasePriceTimeStamp),\r\n"
			+ "\r\n"
			+ ");\r\n"
			+ "CREATE TABLE SalesPrice(\r\n"
			+ "Price SmallMoney NOT NULL, \r\n"
			+ "SalesPriceTimeStamp DATETIME NOT NULL, \r\n"
			+ "MaterialNo int NOT NULL,\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo), \r\n"
			+ "PRIMARY KEY (MaterialNo , SalesPriceTimeStamp),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE StockMaterial( \r\n"
			+ "StockMaterialId int IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "MaterialNo INT NOT NULL, \r\n"
			+ "MinStock INT NOT NULL,\r\n"
			+ "MaxStock INT NOT NULL,\r\n"
			+ "Quantity INT NOT NULL,\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo), \r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE GenericMaterial( \r\n"
			+ "GenericMaterialId int IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "MaterialNo INT NOT NULL, \r\n"
			+ "ProductType varchar(20) NOT NULL,\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo), \r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE StockReservation(\r\n"
			+ "ReservationDate DATETIME NOT NULL, \r\n"
			+ "Quantity int NOT NULL, \r\n"
			+ "StockMaterialId INT NOT NULL, \r\n"
			+ "Foreign Key (StockMaterialId) REFERENCES StockMaterial(StockMaterialId),\r\n"
			+ "PRIMARY KEY(StockMaterialId , ReservationDate),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Orders(\r\n"
			+ "OrderNo INT IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "StartDate DATETIME NOT NULL,\r\n"
			+ "Deadline DATETIME NOT NULL,\r\n"
			+ "EmployeeId INT NOT NULL,\r\n"
			+ "CustomerNo INT NOT NULL,\r\n"
			+ "IsFinished BIT NOT NULL,\r\n"
			+ "FOREIGN KEY(EmployeeId) REFERENCES Employee(EmployeeId),\r\n"
			+ "FOREIGN KEY(CustomerNo) REFERENCES Customer(CustomerNo),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE OFFER(\r\n"
			+ "OfferId INT IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "ValidToDate DATE NOT NULL, \r\n"
			+ "DateCreated DATE NOT NULL, \r\n"
			+ "IsAccepted BIT NOT NULL, \r\n"
			+ "EmployeeId INT NOT NULL,\r\n"
			+ "CustomerNo INT NOT NULL,\r\n"
			+ "EstimateHours TIME NOT NULL,\r\n"
			+ "FOREIGN KEY(EmployeeId) REFERENCES Employee(EmployeeId),\r\n"
			+ "FOREIGN KEY(CustomerNo) REFERENCES Customer(CustomerNo),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Orderline(\r\n"
			+ "OrderlineId INT IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "MaterialNo INT NOT NULL, \r\n"
			+ "Quantity INT NOT NULL,\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE OfferOrderline(\r\n"
			+ "OfferId INT NOT NULL,\r\n"
			+ "OrderlineId INT NOT NULL,\r\n"
			+ "FOREIGN KEY(OfferId) REFERENCES Offer(OfferId),\r\n"
			+ "FOREIGN KEY (OrderlineId) REFERENCES Orderline(OrderlineId),\r\n"
			+ "PRIMARY KEY(OfferId, OrderlineId),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE SupplyOrder(\r\n"
			+ "SupplyOrderId INT IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "IsDelivered BIT NOT NULL,\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE SupplierOrderline(\r\n"
			+ "SupplyOrderId INT NOT NULL, \r\n"
			+ "OrderlineId INT NOT NULL,\r\n"
			+ "FOREIGN KEY(SupplyOrderId) REFERENCES SupplyOrder(SupplyOrderId),\r\n"
			+ "FOREIGN KEY(OrderlineId) REFERENCES Orderline(OrderlineId),\r\n"
			+ "PRIMARY KEY (SupplyOrderId, OrderlineId),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Logs(\r\n"
			+ "LogId INT IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "OrderNo INT NOT NULL, \r\n"
			+ "EmployeeId INT NOT NULL,\r\n"
			+ "LogTimeStamp DATETIME NOT NULL,\r\n"
			+ "FOREIGN KEY (OrderNo) REFERENCES Orders(OrderNo),\r\n"
			+ "FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE MaterialLogs(\r\n"
			+ "MaterialLogId INT IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "Quantity INT NOT NULL, \r\n"
			+ "MaterialNo INT NOT NULL, \r\n"
			+ "LogId INT NOT NULL,\r\n"
			+ "FOREIGN KEY (LogId) REFERENCES Logs(LogId),\r\n"
			+ "FOREIGN KEY (MaterialNo) REFERENCES Material(MaterialNo),\r\n"
			+ ");\r\n"
			+ "CREATE TABLE HourLogs(\r\n"
			+ "HourlogId INT IDENTITY(1,1) PRIMARY KEY, \r\n"
			+ "HoursWorked DECIMAL NOT NULL, \r\n"
			+ "LogId INT NOT NULL,\r\n"
			+ "FOREIGN KEY (LogId) REFERENCES Logs(LogId),\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Inventory(\r\n"
			+ "InventoryId INT IDENTITY(1,1) PRIMARY KEY\r\n"
			+ ");\r\n"
			+ "CREATE TABLE Locations(\r\n"
			+ "LocationId INT IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "InventoryId INT NOT NULL,\r\n"
			+ "AddressId INT NOT NULL, \r\n"
			+ "FOREIGN KEY (InventoryId) REFERENCES Inventory(InventoryId),\r\n"
			+ "FOREIGN KEY (AddressId) REFERENCES Address\r\n"
			+ ");\r\n"
			+ "\r\n"
			+ "CREATE TABLE Vans(\r\n"
			+ "VanId INT IDENTITY(1,1) PRIMARY KEY,\r\n"
			+ "VanLicenseplate varchar(20) NOT NULL,\r\n"
			+ "InventoryId INT NOT NULL,\r\n"
			+ "EmployeeId INT NOT NULL,\r\n"
			+ "FOREIGN KEY (InventoryId) REFERENCES Inventory(InventoryId),\r\n"
			+ "FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId),\r\n"
			+ ");\r\n"
			+ "CREATE TABLE MaterialQuantity(\r\n"
			+ "StockMaterialId INT NOT NULL, \r\n"
			+ "InventoryId INT NOT NULL, \r\n"
			+ "Quantity INT NOT NULL,\r\n"
			+ "FOREIGN KEY (InventoryId) REFERENCES Inventory(InventoryId),\r\n"
			+ "FOREIGN KEY (stockMaterialId) REFERENCES StockMaterial(StockMaterialId),\r\n"
			+ "PRIMARY KEY(StockMaterialId , InventoryId),\r\n"
			+ ");"
			+ "-- Insert data into Zipcodes\r\n"
			+ "INSERT INTO Zipcodes (Zipcode, CityName)\r\n"
			+ "VALUES\r\n"
			+ "(10001, 'New York'),\r\n"
			+ "(90001, 'Los Angeles'),\r\n"
			+ "(60601, 'Chicago'),\r\n"
			+ "(77001, 'Houston'),\r\n"
			+ "(85001, 'Phoenix'),\r\n"
			+ "(60091, 'USA'),\r\n"
			+ "(8000, 'Aarhus'),\r\n"
			+ "(1620, 'Copenhagen S'),\r\n"
			+ "(2100, 'Copenhagen N'),\r\n"
			+ "(2300, 'Copenhagen NV');\r\n"
			+ "\r\n"
			+ "-- Insert data into Address\r\n"
			+ "INSERT INTO Address (StreetName, BuildingNo, FloorNo, Country, Zipcode)\r\n"
			+ "VALUES\r\n"
			+ "('Broadway', '10A', 3, 'USA', 60091),\r\n"
			+ "('Hollywood Blvd', '22B', 1, 'USA', 60091),\r\n"
			+ "('Magnificent Mile', '5C', 2, 'USA', 60091),\r\n"
			+ "('Main St', '7D', 0, 'USA', 60091),\r\n"
			+ "('Central Ave', '15E', 4, 'USA', 60091),\r\n"
			+ "('Maple Avenue', '101', 1, 'USA', 60091),\r\n"
			+ "('Pine Street', '202', 2, 'Phoenix', 85001),\r\n"
			+ "('Oak Road', '303', 3, 'New York', 10001),\r\n"
			+ "('Cedar Lane', '404', 4, 'New York', 10001),\r\n"
			+ "('Birch Boulevard', '505', 5, 'Chicago', 60601),\r\n"
			+ "('Nørregade', '12A', 2, 'Denmark', 8000),\r\n"
			+ "('Vesterbrogade', '45', 3, 'Denmark', 1620),\r\n"
			+ "('Øster Allé', '23B', 1, 'Denmark', 2100),\r\n"
			+ "('Amagerbrogade', '89', 4, 'Denmark', 2300);\r\n"
			+ "\r\n"
			+ "-- Insert data into EmployeeType\r\n"
			+ "INSERT INTO EmployeeType (EmployeeTypeName)\r\n"
			+ "VALUES\r\n"
			+ "('Apprentice'),\r\n"
			+ "('Journeyman'),\r\n"
			+ "('Owner');\r\n"
			+ "\r\n"
			+ "-- Insert data into Person\r\n"
			+ "INSERT INTO Person (FirstName, LastName, PhoneNo, Email, AddressId)\r\n"
			+ "VALUES\r\n"
			+ "('John', 'Doe', '12345678', 'john.doe@example.com', 1),\r\n"
			+ "('Jane', 'Smith', '22222222', 'jane.smith@example.com', 2),\r\n"
			+ "('Emily', 'Brown', '71024388', 'emily.brown@example.com', 3),\r\n"
			+ "('Michael', 'Johnson', '20318107', 'michael.johnson@example.com', 4),\r\n"
			+ "('Sarah', 'Davis', '47530941', 'sarah.davis@example.com', 5),\r\n"
			+ "('Aaron', 'Smith', '88551906', 'aaron.smith@example.com', 6),\r\n"
			+ "('Jeremy', 'Jones', '78123194', 'jeremy.jones@example.com', 7),\r\n"
			+ "('William', 'Lee', '19532742', 'willaim.lee@example.com', 8),\r\n"
			+ "('Michael', 'Scott', '91629532', 'michael.scott@example.com', 9),\r\n"
			+ "('Frederik', 'Nielsen', '4512345678', 'frederik.nielsen@example.dk', 10),\r\n"
			+ "('Emma', 'Hansen', '4523456789', 'emma.hansen@example.dk', 11),\r\n"
			+ "('Mikkel', 'Jensen', '4534567890', 'mikkel.jensen@example.dk', 12),\r\n"
			+ "('Sofie', 'Andersen', '4545678901', 'sofie.andersen@example.dk', 13);\r\n"
			+ "\r\n"
			+ "-- Insert data into Customer\r\n"
			+ "INSERT INTO Customer (PersonId)\r\n"
			+ "VALUES\r\n"
			+ "(1),(2),(3),(4),(5),(6),(7),(8);\r\n"
			+ "\r\n"
			+ "-- Insert data into BusinessCustomer\r\n"
			+ "INSERT INTO BusinessCustomer (CVR, BusinessName, CustomerNo)\r\n"
			+ "VALUES\r\n"
			+ "(100001, 'Tech Corp', 6),\r\n"
			+ "(100002, 'Health Ltd', 7),\r\n"
			+ "(100003, 'Retail Co', 8);\r\n"
			+ "\r\n"
			+ "-- Insert data into Employee\r\n"
			+ "INSERT INTO Employee (CPR, EmployeeTypeNo, PersonId)\r\n"
			+ "VALUES\r\n"
			+ "('1234567890', 1, 9),\r\n"
			+ "('2345678901', 2, 10),\r\n"
			+ "('3456789012', 3, 11),\r\n"
			+ "('2213489012', 3, 12),\r\n"
			+ "('3453389012', 3, 13);\r\n"
			+ "\r\n"
			+ "-- Insert data into Material\r\n"
			+ "INSERT INTO Material (MaterialNo, ProductName)\r\n"
			+ "VALUES\r\n"
			+ "(1001, 'Cement'),\r\n"
			+ "(1002, 'Mursten'),\r\n"
			+ "(1003, 'Fliser'),\r\n"
			+ "(1004, 'Klinker'),\r\n"
			+ "(1005, 'Mørtel');\r\n"
			+ "\r\n"
			+ "-- Insert data into MaterialDescription\r\n"
			+ "INSERT INTO MaterialDescription (Description, MaterialDescriptionTimeStamp, MaterialNo)\r\n"
			+ "VALUES\r\n"
			+ "('Dette er cement', GETDATE(), 1001),\r\n"
			+ "('Dette er mursten', GETDATE(), 1002),\r\n"
			+ "('Dette er store blå fliser', GETDATE(), 1003),\r\n"
			+ "('Dette er marmor klinker', GETDATE(), 1004),\r\n"
			+ "('Dette er mørtel fra Aalborg cement', GETDATE(), 1005);\r\n"
			+ "\r\n"
			+ "-- Insert data into PurchasePrice\r\n"
			+ "INSERT INTO PurchasePrice (Price, PurchasePriceTimeStamp, MaterialNo)\r\n"
			+ "VALUES\r\n"
			+ "(1200.00, GETDATE(), 1001),\r\n"
			+ "(300.00, GETDATE(), 1002),\r\n"
			+ "(80.00, GETDATE(), 1003),\r\n"
			+ "(40.00, GETDATE(), 1004),\r\n"
			+ "(150.00, GETDATE(), 1005);\r\n"
			+ "\r\n"
			+ "-- Insert data into SalesPrice\r\n"
			+ "INSERT INTO SalesPrice (Price, SalesPriceTimeStamp, MaterialNo)\r\n"
			+ "VALUES\r\n"
			+ "(1500.00, GETDATE(), 1001),\r\n"
			+ "(400.00, GETDATE(), 1002),\r\n"
			+ "(100.00, GETDATE(), 1003),\r\n"
			+ "(50.00, GETDATE(), 1004),\r\n"
			+ "(200.00, GETDATE(), 1005);\r\n"
			+ "\r\n"
			+ "-- Insert data into StockMaterial\r\n"
			+ "INSERT INTO StockMaterial (MaterialNo, MinStock, MaxStock, Quantity)\r\n"
			+ "VALUES\r\n"
			+ "(1001, 15, 75, 50 ),\r\n"
			+ "(1002, 60, 150, 100);\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "-- Insert data into StockReservation\r\n"
			+ "INSERT INTO StockReservation (ReservationDate, Quantity, StockMaterialId)\r\n"
			+ "VALUES\r\n"
			+ "(GETDATE(), 10, 1),\r\n"
			+ "(GETDATE(), 5, 2), \r\n"
			+ "('2024-12-5', 15, 2);\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "--Insert data into GenericMaterial\r\n"
			+ "INSERT INTO GenericMaterial (MaterialNo, ProductType)\r\n"
			+ "VALUES\r\n"
			+ "(1003, 'Indendørs'),\r\n"
			+ "(1004, 'Indendørs'),\r\n"
			+ "(1005, 'Udendørs');\r\n"
			+ "\r\n"
			+ "\r\n"
			+ "-- Insert data into Orders\r\n"
			+ "INSERT INTO Orders (StartDate, Deadline, EmployeeId, CustomerNo, IsFinished)\r\n"
			+ "VALUES\r\n"
			+ "(GETDATE(), DATEADD(DAY, 5, GETDATE()), 1, 1, 0),\r\n"
			+ "(GETDATE(), DATEADD(DAY, 10, GETDATE()), 2, 2, 0),\r\n"
			+ "(GETDATE(), DATEADD(DAY, 7, GETDATE()), 3, 3, 1),\r\n"
			+ "(GETDATE(), DATEADD(DAY, 3, GETDATE()), 4, 4, 0),\r\n"
			+ "(GETDATE(), DATEADD(DAY, 14, GETDATE()), 5, 5, 1);\r\n"
			+ "\r\n"
			+ "-- Insert data into OFFER\r\n"
			+ "INSERT INTO OFFER (ValidToDate, DateCreated, IsAccepted, EmployeeId, CustomerNo, EstimateHours)\r\n"
			+ "VALUES\r\n"
			+ "(DATEADD(DAY, 30, GETDATE()), GETDATE(), 1, 1, 1, '10:00'),\r\n"
			+ "(DATEADD(DAY, 20, GETDATE()), GETDATE(), 0, 2, 2, '15:00'),\r\n"
			+ "(DATEADD(DAY, 25, GETDATE()), GETDATE(), 1, 3, 3, '20:00'),\r\n"
			+ "(DATEADD(DAY, 10, GETDATE()), GETDATE(), 0, 4, 4, '12:00'),\r\n"
			+ "(DATEADD(DAY, 15, GETDATE()), GETDATE(), 1, 5, 5, '8:00');\r\n"
			+ "\r\n"
			+ "-- Insert data into Orderline\r\n"
			+ "INSERT INTO Orderline (MaterialNo, Quantity)\r\n"
			+ "VALUES\r\n"
			+ "(1001, 2),\r\n"
			+ "(1002, 4),\r\n"
			+ "(1003, 1),\r\n"
			+ "(1004, 3),\r\n"
			+ "(1005, 2);\r\n"
			+ "\r\n"
			+ "-- Insert data into OfferOrderline\r\n"
			+ "INSERT INTO OfferOrderline (OfferId, OrderlineId)\r\n"
			+ "VALUES\r\n"
			+ "(1, 1),\r\n"
			+ "(2, 2),\r\n"
			+ "(3, 3),\r\n"
			+ "(4, 4),\r\n"
			+ "(5, 5);\r\n"
			+ "\r\n"
			+ "-- Insert data into SupplyOrder\r\n"
			+ "INSERT INTO SupplyOrder (IsDelivered)\r\n"
			+ "VALUES\r\n"
			+ "(1),\r\n"
			+ "(0),\r\n"
			+ "(1),\r\n"
			+ "(0),\r\n"
			+ "(1);\r\n"
			+ "\r\n"
			+ "-- Insert data into SupplierOrderline\r\n"
			+ "INSERT INTO SupplierOrderline (SupplyOrderId, OrderlineId)\r\n"
			+ "VALUES\r\n"
			+ "(1, 1),\r\n"
			+ "(2, 2),\r\n"
			+ "(3, 3),\r\n"
			+ "(4, 4),\r\n"
			+ "(5, 5);\r\n"
			+ "\r\n"
			+ "-- Insert data into Logs\r\n"
			+ "INSERT INTO Logs (OrderNo, EmployeeId, LogTimeStamp)\r\n"
			+ "VALUES\r\n"
			+ "(1, 1, GETDATE()),\r\n"
			+ "(2, 2, GETDATE()),\r\n"
			+ "(3, 3, GETDATE()),\r\n"
			+ "(4, 4, GETDATE()),\r\n"
			+ "(5, 5, GETDATE());\r\n"
			+ "\r\n"
			+ "-- Insert data into MaterialLogs\r\n"
			+ "INSERT INTO MaterialLogs (Quantity, MaterialNo, LogId)\r\n"
			+ "VALUES\r\n"
			+ "(5, 1001, 1),\r\n"
			+ "(3, 1002, 2),\r\n"
			+ "(8, 1003, 3),\r\n"
			+ "(2, 1004, 4),\r\n"
			+ "(6, 1005, 5);\r\n"
			+ "\r\n"
			+ "-- Insert data into HourLogs\r\n"
			+ "INSERT INTO HourLogs (HoursWorked, LogId)\r\n"
			+ "VALUES\r\n"
			+ "(8.5, 1),\r\n"
			+ "(6.0, 2),\r\n"
			+ "(7.25, 3),\r\n"
			+ "(5.5, 4),\r\n"
			+ "(9.0, 5);\r\n"
			+ "\r\n"
			+ "-- Insert data into Inventory\r\n"
			+ "INSERT INTO Inventory DEFAULT VALUES;\r\n"
			+ "INSERT INTO Inventory DEFAULT VALUES;\r\n"
			+ "\r\n"
			+ "-- Insert data into Locations\r\n"
			+ "INSERT INTO Locations (InventoryId, AddressId)\r\n"
			+ "VALUES\r\n"
			+ "(1, 1),\r\n"
			+ "(2, 2);\r\n"
			+ "\r\n"
			+ "-- Insert data into Vans\r\n"
			+ "INSERT INTO Vans (VanLicenseplate, InventoryId, EmployeeId)\r\n"
			+ "VALUES\r\n"
			+ "('ABC123', 1, 1),\r\n"
			+ "('XYZ789', 2, 2);\r\n"
			+ "\r\n"
			+ "-- Insert data into MaterialQuantity\r\n"
			+ "INSERT INTO MaterialQuantity (StockMaterialId, InventoryId, Quantity)\r\n"
			+ "VALUES\r\n"
			+ "(1, 1, 20),\r\n"
			+ "(2, 2, 10);\r\n"
			+ "";
	
	public static void main(String[] args) {
		try {
			resetDB = DBConnection.getInstance().getConnection().prepareStatement(resetScript);
			resetDB.executeLargeUpdate(resetScript);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
			
}
